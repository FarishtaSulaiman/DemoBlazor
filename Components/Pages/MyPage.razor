@page "/mypage"
@rendermode InteractiveServer
@using DemoBlazor
@using DemoBlazor.Model
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject NavigationManager Navigation
@inject ProtectedSessionStorage SessionStorage
@using System.Collections.Generic




<h1>Welcome to MyPage!</h1>


<h2>Your shopping lists:</h2>

<!-- Lista med shoppinglistor -->
<section class="shopping-list">
<ul class="list-group">
    @foreach (var list in shoppingLists)
    {
        <li class="list-group-item">
            <h3>@list.Title</h3>

            <!-- Ta bort shoppinglista -->
                <button type="button" class="btn btn-danger small-btn" @onclick="() => RemoveShoppingList(list)">
                    <i class="bi bi-trash"></i>
                </button>


            <!-- Redigera shoppinglista -->
                <button type="button" class="btn btn-primary small-btn" @onclick="() => EditShoppingList(list)">
                <i class="bi bi-pencil"></i>
            </button>

            <!-- Lista med produkter -->
            <ul>
                @foreach (var product in list.Products)
                {
                    <li>
                        @product.Name - @product.Amount @product.Category

                        <!-- Ta bort produkt -->
                            <button type="button" class="btn btn-danger small-btn" @onclick="() => RemoveProduct(product, list)">
                                <i class="bi bi-trash"></i>
                            </button>

                        <!-- Redigera produkt -->
                            <button type="button" class="btn btn-primary small-btn" @onclick="() => EditShoppingList(list)">
                            <i class="bi bi-pencil"></i>
                        </button>
                    </li>
                }
            </ul>
        </li>
    }
</ul>
</section>

<NavLink href="/CreateNewShoppingList" class="btnNewShoppingList">Create New Shopping List </NavLink>

@* <button class="btnEditShoppinglist" @onclick="SaveEditedList">Save</button> *@

@code {

    // Mockad lista av shoppinglistor
    private List<ShoppingList> shoppingLists = new List<ShoppingList>
    {
        new ShoppingList
        {
            Id = 1,
            Title = "Weekly Groceries",
            Products = new List<Product>
            {
                new Product { Name = "Apple", Amount = 1, Category = "Fruits & Vegetables" },
                new Product { Name = "Banana", Amount = 2, Category = "Fruits & Vegetables" },
                new Product { Name = "Orange", Amount = 3, Category = "Fruits & Vegetables" }
            }
        },
        new ShoppingList
        {
            Id = 2,
            Title = "Dinner Shopping",
            Products = new List<Product>
            {
                new Product { Name = "Cream", Amount = 1, Category = "Fridge items" },
                new Product { Name = "Cottage Cheese", Amount = 1, Category = "Fridge items" }
            }
        }
    };

    // Ta bort en shoppinglista
    // private void RemoveShoppingList(ShoppingList list)
    // {
    //     shoppingLists.Remove(list);
    //     StateHasChanged(); // Tvinga omrendering
    // }

    private void RemoveShoppingList(ShoppingList list)
    {
        var shoppingListToRemove = shoppingLists.FirstOrDefault(l => l.Id == list.Id);
        if (shoppingListToRemove != null)
        {
            shoppingLists.Remove(shoppingListToRemove);
            StateHasChanged(); // Tvinga omrendering av UI
        }
    }



    // Redigera shoppinglista
    private void EditShoppingList(ShoppingList uppdatedList)
    {
        // Hitta listan baserat på Id och uppdatera dess titel eller andra egenskaper
        var list = shoppingLists.FirstOrDefault(l => l.Id == uppdatedList.Id);
        if (list != null)
        {
            list.Title = uppdatedList.Title;
            // Andra uppdateringar, som att ändra produkter eller annan information
        }
        // Tvinga omrendering
        StateHasChanged();
    }

    // Ta bort produkt i listan
    private void RemoveProduct(Product product, ShoppingList list)
    {
        var shoppingList = shoppingLists.FirstOrDefault(l => l.Id == list.Id);
        if (shoppingList != null)
        {
            shoppingList.Products.Remove(product);
            StateHasChanged(); // Uppdatera UI
        }
    }

    // Redigera produkt i listan
    private void EditProduct(Product product)
    {

    }
}

<style>
    .btnNewShoppingList,
    .btnEditShoppinglist {
        padding: 10px 20px;
        border-radius: 10px;
        background-color: #007bff;
        color: white;
        font-size: 16px;
        text-decoration: none; /* Tar bort understrykning */
        cursor: pointer;
        transition: background-color 0.3s;
        margin-top: 15 px; 
    }

        .btnNewShoppingList:hover
        .btnEditShoppinglist:hover {
            background-color: #0056b3;
        }

        .btnNewShoppingList:focus
        .btnEditShoppinglist:focus {
            outline: none;
        }

    /* Justera storleken på knapparna genom att minska paddingen */
    .small-btn {
        padding: 5px 10px; /* Minska paddingen */
        font-size: 12px; /* Minska textstorleken */
    }

    .list-group {
        margin-bottom: 25px;
    }

    body {
        font-family: Arial, sans-serif;
        background-color: #2c2c2c;
        color: white;
    }

    .MyPage-container {
        display: flex;
        justify-content: space-between;
        max-width: 900px;
        margin: auto;
    }

    .list-group-item {
        background-color: #444;
        padding: 15px;
        border-radius: 8px;
        width: 30%;
        color: white;
        font-size: 14px;
    }

</style>
